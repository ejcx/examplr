{"version":3,"sources":["/source/examplr.js","/source/src/examplr.js","examplr.min.js"],"names":["global","factory","exports","module","define","amd","examplr","this","identity","arg","runExample","_ref","name","cb","h2","document","createElement","el","textContent","container","appendChild","optionsCb","err","innerHTML","stack","runExamples","examples","forEach","example","hasOnly","only","length","queueExamples","debouncedTimer","clearTimeout","setTimeout","pushExample","push","arguments","undefined","getElementById","skip"],"mappings":"CAAC,SAAUA,EAAQC,GACE,gBAAZC,UAA0C,mBAAXC,QAAyBA,OAAOD,QAAUD,IAC9D,kBAAXG,SAAyBA,OAAOC,IAAMD,OAAOH,GACpDD,EAAOM,QAAUL,KACjBM,KAAM,WAAc,YCCtB,SAASC,GAASC,GAChB,MAAOA,GASM,QAASH,KAetB,QAASI,GAAWC,GCQhB,GDRiBC,GAADD,EAACC,KAAMC,EAAPF,EAAOE,GACrBC,EAAKC,SAASC,cAAc,MAC5BC,EAAKF,SAASC,cAAc,MAEhCF,GAAGI,YAAcN,EAEjBO,EAAUC,YAAYN,GACtBK,EAAUC,YAAYH,EAEtB,KACEJ,EAAGQ,EAAUJ,IACb,MAAOK,GAEP,KADAL,GAAGM,UAAY,QAAUD,EAAIE,MAAQ,SAC/BF,GASV,QAASG,KACPC,EAASC,QAAQ,SAAAC,KACVC,GAAWD,EAAQE,OACtBpB,EAAWkB,KAIfF,EAASK,OAAS,EAQpB,QAASC,KACHC,GACFC,aAAaD,GAEfA,EAAiBE,WAAWV,EAAa,GAW3C,QAASW,GAAYxB,EAAMC,EAAIiB,GACzBA,IACFD,GAAU,GAEZH,EAASW,MAAMzB,KAAAA,EAAMC,GAAAA,EAAIiB,KAAAA,IACzBE,IASF,QAASJ,GAAQhB,EAAMC,GACrBuB,EAAYxB,EAAMC,GAAI,GC5EtB,GDN4BQ,GAAAiB,UAAAP,QAAA,GAAAQ,SAAAD,UAAA,GAAY9B,EAAA8B,UAAA,GACpCnB,EAAYJ,SAASyB,eAAe,WACpCd,KAEFG,EAAAU,OACAN,EAAAM,MAkGJ,OAVAX,GAAQE,KAAO,SAASlB,EAAMC,GAC5BuB,EAAYxB,EAAMC,GAAI,IAOxBe,EAAQa,KAAO,aAERb,EDSP,MAAOtB","file":"examplr.min.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  global.examplr = factory()\n}(this, function () { 'use strict';\n\n  /**\n   * @private\n   * @param {*} arg\n   * @return {*} arg\n   */\n  function identity(arg) {\n    return arg;\n  }\n\n  /**\n   * Create a new examplr instance.\n   *\n   * @param {Function} optionsCb Modify the arguments passed to example callbacks.\n   * @return {example}\n   */\n  function examplr(optionsCb = identity) {\n    const container = document.getElementById('examplr');\n    const examples = [];\n\n    let hasOnly;\n    let debouncedTimer;\n\n    /**\n     * Run an example.\n     *\n     * @private\n     * @param {Object} options\n     * @param {String} options.name Name of the example\n     * @param {Function} options.cb Callback that runs the example\n     */\n    function runExample({name, cb}) {\n      var h2 = document.createElement('h2');\n      var el = document.createElement('div');\n\n      h2.textContent = name;\n\n      container.appendChild(h2);\n      container.appendChild(el);\n\n      try {\n        cb(optionsCb(el));\n      } catch (err) {\n        el.innerHTML = '<pre>' + err.stack + '</pre>';\n        throw err;\n      }\n    }\n\n    /**\n     * Run all the current examples.\n     *\n     * @private\n     */\n    function runExamples() {\n      examples.forEach(example => {\n        if (!hasOnly || example.only) {\n          runExample(example);\n        }\n      });\n\n      examples.length = 0;\n    }\n\n    /**\n     * Queue the examples to run.\n     *\n     * @private\n     */\n    function queueExamples() {\n      if (debouncedTimer) {\n        clearTimeout(debouncedTimer);\n      }\n      debouncedTimer = setTimeout(runExamples, 1);\n    }\n\n    /**\n     * Add a new example to the queue.\n     *\n     * @private\n     * @param {String} name\n     * @param {Function} cb\n     * @param {Boolean} only\n     */\n    function pushExample(name, cb, only) {\n      if (only) {\n        hasOnly = true;\n      }\n      examples.push({name, cb, only});\n      queueExamples();\n    }\n\n    /**\n     * Create an example.\n     *\n     * @param {String} name Name of the example\n     * @param {Function} cb Callback that runs the example\n     */\n    function example(name, cb) {\n      pushExample(name, cb, false);\n    }\n\n    /**\n     * Create an example that will be the only one to run (unless there are\n     * multiple \"only\" ones to run). This is useful when you want to focus\n     * on a particular example.\n     *\n     * @param {String} name Name of the example\n     * @param {Function} cb Callback that runs the example\n     */\n    example.only = function(name, cb) {\n      pushExample(name, cb, true);\n    };\n\n    /**\n     * Create an example but do not run it (just a noop). This is useful when you\n     * want to temporarily disable an example.\n     */\n    example.skip = function() {};\n\n    return example;\n  };\n\n  return examplr;\n\n}));\n","/**\n * @private\n * @param {*} arg\n * @return {*} arg\n */\nfunction identity(arg) {\n  return arg;\n}\n\n/**\n * Create a new examplr instance.\n *\n * @param {Function} optionsCb Modify the arguments passed to example callbacks.\n * @return {example}\n */\nexport default function examplr(optionsCb = identity) {\n  const container = document.getElementById('examplr');\n  const examples = [];\n\n  let hasOnly;\n  let debouncedTimer;\n\n  /**\n   * Run an example.\n   *\n   * @private\n   * @param {Object} options\n   * @param {String} options.name Name of the example\n   * @param {Function} options.cb Callback that runs the example\n   */\n  function runExample({name, cb}) {\n    var h2 = document.createElement('h2');\n    var el = document.createElement('div');\n\n    h2.textContent = name;\n\n    container.appendChild(h2);\n    container.appendChild(el);\n\n    try {\n      cb(optionsCb(el));\n    } catch (err) {\n      el.innerHTML = '<pre>' + err.stack + '</pre>';\n      throw err;\n    }\n  }\n\n  /**\n   * Run all the current examples.\n   *\n   * @private\n   */\n  function runExamples() {\n    examples.forEach(example => {\n      if (!hasOnly || example.only) {\n        runExample(example);\n      }\n    });\n\n    examples.length = 0;\n  }\n\n  /**\n   * Queue the examples to run.\n   *\n   * @private\n   */\n  function queueExamples() {\n    if (debouncedTimer) {\n      clearTimeout(debouncedTimer);\n    }\n    debouncedTimer = setTimeout(runExamples, 1);\n  }\n\n  /**\n   * Add a new example to the queue.\n   *\n   * @private\n   * @param {String} name\n   * @param {Function} cb\n   * @param {Boolean} only\n   */\n  function pushExample(name, cb, only) {\n    if (only) {\n      hasOnly = true;\n    }\n    examples.push({name, cb, only});\n    queueExamples();\n  }\n\n  /**\n   * Create an example.\n   *\n   * @param {String} name Name of the example\n   * @param {Function} cb Callback that runs the example\n   */\n  function example(name, cb) {\n    pushExample(name, cb, false);\n  }\n\n  /**\n   * Create an example that will be the only one to run (unless there are\n   * multiple \"only\" ones to run). This is useful when you want to focus\n   * on a particular example.\n   *\n   * @param {String} name Name of the example\n   * @param {Function} cb Callback that runs the example\n   */\n  example.only = function(name, cb) {\n    pushExample(name, cb, true);\n  };\n\n  /**\n   * Create an example but do not run it (just a noop). This is useful when you\n   * want to temporarily disable an example.\n   */\n  example.skip = function() {};\n\n  return example;\n};\n",null],"sourceRoot":"/source/"}