{"version":3,"sources":["examplr.js","src/examplr.js"],"names":[],"mappings":"AAAA,AAAC,CAAA,UAAU,MAAM,EAAE,OAAO,EAAE;AAC1B,SAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,MAAM,KAAK,WAAW,GAAG,MAAM,CAAC,OAAO,GAAG,OAAO,EAAE,GACzF,OAAO,MAAM,KAAK,UAAU,IAAI,MAAM,CAAC,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,GAC5D,MAAM,CAAC,OAAO,GAAG,OAAO,EAAE,CAAA;CAC3B,CAAA,CAAC,IAAI,EAAE,YAAY;AAAE,cAAY,CAAC;;;;;;;ACCnC,WAAS,QAAA,CAAS,GAAA,EAAK;AACrB,WAAO,GAAA,CAAA;GACT;;;;;;;;AAQe,WAAS,OAAA,GAA8B;QAAtB,SAAA,yDAAY,QAAA;;AAC1C,QAAM,SAAA,GAAY,QAAA,CAAS,cAAA,CAAe,SAAA,CAAA,CAAA;AAC1C,QAAM,QAAA,GAAW,EAAA,CAAA;;AAEjB,QAAI,OAAA,YAAA,CAAA;AACJ,QAAI,cAAA,YAAA,CAAA;;;;;;;;;;AAUJ,aAAS,UAAA,CAAW,IAAO,EAAK;UAAX,IAAA,GAAD,IAAO,CAAN,IAAA;UAAM,EAAA,GAAP,IAAO,CAAA,EAAA;;AACzB,UAAI,EAAA,GAAK,QAAA,CAAS,aAAA,CAAc,IAAA,CAAA,CAAA;AAChC,UAAI,EAAA,GAAK,QAAA,CAAS,aAAA,CAAc,KAAA,CAAA,CAAA;;AAEhC,QAAA,CAAG,WAAA,GAAc,IAAA,CAAA;;AAEjB,eAAA,CAAU,WAAA,CAAY,EAAA,CAAA,CAAA;AACtB,eAAA,CAAU,WAAA,CAAY,EAAA,CAAA,CAAA;;AAEtB,UAAI;AACF,UAAA,CAAG,SAAA,CAAU,EAAA,CAAA,CAAA,CAAA;OACnB,CAAM,OAAO,GAAA,EAAK;AACZ,UAAA,CAAG,SAAA,GAAY,OAAA,GAAU,GAAA,CAAI,KAAA,GAAQ,QAAA,CAAA;AACrC,cAAM,GAAA,CAAA;OACZ;KACA;;;;;;;AAOE,aAAS,WAAA,GAAc;AACrB,cAAA,CAAS,OAAA,CAAQ,UAAA,OAAA,EAAW;AAC1B,YAAI,CAAC,OAAA,IAAW,OAAA,CAAQ,IAAA,EAAM;AAC5B,oBAAA,CAAW,OAAA,CAAA,CAAA;SACnB;OACA,CAAA,CAAA;;AAEI,cAAA,CAAS,MAAA,GAAS,CAAA,CAAA;KACtB;;;;;;;AAOE,aAAS,aAAA,GAAgB;AACvB,UAAI,cAAA,EAAgB;AAClB,oBAAA,CAAa,cAAA,CAAA,CAAA;OACnB;AACI,oBAAA,GAAiB,UAAA,CAAW,WAAA,EAAa,CAAA,CAAA,CAAA;KAC7C;;;;;;;;;;AAUE,aAAS,WAAA,CAAY,IAAA,EAAM,EAAA,EAAI,IAAA,EAAM;AACnC,UAAI,IAAA,EAAM;AACR,eAAA,GAAU,IAAA,CAAA;OAChB;AACI,cAAA,CAAS,IAAA,CAAK,EAAC,IAAA,EAAA,IAAA,EAAM,EAAA,EAAA,EAAA,EAAI,IAAA,EAAA,IAAA,EAAA,CAAA,CAAA;AACzB,mBAAA,EAAA,CAAA;KACJ;;;;;;;;AAQE,aAAS,OAAA,CAAQ,IAAA,EAAM,EAAA,EAAI;AACzB,iBAAA,CAAY,IAAA,EAAM,EAAA,EAAI,KAAA,CAAA,CAAA;KAC1B;;;;;;;;;;AAUE,WAAA,CAAQ,IAAA,GAAO,UAAS,IAAA,EAAM,EAAA,EAAI;AAChC,iBAAA,CAAY,IAAA,EAAM,EAAA,EAAI,IAAA,CAAA,CAAA;KAC1B,CAAA;;;;;;AAME,WAAA,CAAQ,IAAA,GAAO,YAAW,EAAA,CAAA;;AAE1B,WAAO,OAAA,CAAA;GACR,CAAA;;ADQC,SAAO,OAAO,CAAC;CAEhB,CAAC,CAAE","file":"examplr.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  global.examplr = factory()\n}(this, function () { 'use strict';\n\n  /**\n   * @private\n   * @param {*} arg\n   * @return {*} arg\n   */\n  function identity(arg) {\n    return arg;\n  }\n\n  /**\n   * Create a new examplr instance.\n   *\n   * @param {Function} optionsCb Modify the arguments passed to example callbacks.\n   * @return {example}\n   */\n  function examplr(optionsCb = identity) {\n    const container = document.getElementById('examplr');\n    const examples = [];\n\n    let hasOnly;\n    let debouncedTimer;\n\n    /**\n     * Run an example.\n     *\n     * @private\n     * @param {Object} options\n     * @param {String} options.name Name of the example\n     * @param {Function} options.cb Callback that runs the example\n     */\n    function runExample({name, cb}) {\n      var h2 = document.createElement('h2');\n      var el = document.createElement('div');\n\n      h2.textContent = name;\n\n      container.appendChild(h2);\n      container.appendChild(el);\n\n      try {\n        cb(optionsCb(el));\n      } catch (err) {\n        el.innerHTML = '<pre>' + err.stack + '</pre>';\n        throw err;\n      }\n    }\n\n    /**\n     * Run all the current examples.\n     *\n     * @private\n     */\n    function runExamples() {\n      examples.forEach(example => {\n        if (!hasOnly || example.only) {\n          runExample(example);\n        }\n      });\n\n      examples.length = 0;\n    }\n\n    /**\n     * Queue the examples to run.\n     *\n     * @private\n     */\n    function queueExamples() {\n      if (debouncedTimer) {\n        clearTimeout(debouncedTimer);\n      }\n      debouncedTimer = setTimeout(runExamples, 1);\n    }\n\n    /**\n     * Add a new example to the queue.\n     *\n     * @private\n     * @param {String} name\n     * @param {Function} cb\n     * @param {Boolean} only\n     */\n    function pushExample(name, cb, only) {\n      if (only) {\n        hasOnly = true;\n      }\n      examples.push({name, cb, only});\n      queueExamples();\n    }\n\n    /**\n     * Create an example.\n     *\n     * @param {String} name Name of the example\n     * @param {Function} cb Callback that runs the example\n     */\n    function example(name, cb) {\n      pushExample(name, cb, false);\n    }\n\n    /**\n     * Create an example that will be the only one to run (unless there are\n     * multiple \"only\" ones to run). This is useful when you want to focus\n     * on a particular example.\n     *\n     * @param {String} name Name of the example\n     * @param {Function} cb Callback that runs the example\n     */\n    example.only = function(name, cb) {\n      pushExample(name, cb, true);\n    };\n\n    /**\n     * Create an example but do not run it (just a noop). This is useful when you\n     * want to temporarily disable an example.\n     */\n    example.skip = function() {};\n\n    return example;\n  };\n\n  return examplr;\n\n}));\n","/**\n * @private\n * @param {*} arg\n * @return {*} arg\n */\nfunction identity(arg) {\n  return arg;\n}\n\n/**\n * Create a new examplr instance.\n *\n * @param {Function} optionsCb Modify the arguments passed to example callbacks.\n * @return {example}\n */\nexport default function examplr(optionsCb = identity) {\n  const container = document.getElementById('examplr');\n  const examples = [];\n\n  let hasOnly;\n  let debouncedTimer;\n\n  /**\n   * Run an example.\n   *\n   * @private\n   * @param {Object} options\n   * @param {String} options.name Name of the example\n   * @param {Function} options.cb Callback that runs the example\n   */\n  function runExample({name, cb}) {\n    var h2 = document.createElement('h2');\n    var el = document.createElement('div');\n\n    h2.textContent = name;\n\n    container.appendChild(h2);\n    container.appendChild(el);\n\n    try {\n      cb(optionsCb(el));\n    } catch (err) {\n      el.innerHTML = '<pre>' + err.stack + '</pre>';\n      throw err;\n    }\n  }\n\n  /**\n   * Run all the current examples.\n   *\n   * @private\n   */\n  function runExamples() {\n    examples.forEach(example => {\n      if (!hasOnly || example.only) {\n        runExample(example);\n      }\n    });\n\n    examples.length = 0;\n  }\n\n  /**\n   * Queue the examples to run.\n   *\n   * @private\n   */\n  function queueExamples() {\n    if (debouncedTimer) {\n      clearTimeout(debouncedTimer);\n    }\n    debouncedTimer = setTimeout(runExamples, 1);\n  }\n\n  /**\n   * Add a new example to the queue.\n   *\n   * @private\n   * @param {String} name\n   * @param {Function} cb\n   * @param {Boolean} only\n   */\n  function pushExample(name, cb, only) {\n    if (only) {\n      hasOnly = true;\n    }\n    examples.push({name, cb, only});\n    queueExamples();\n  }\n\n  /**\n   * Create an example.\n   *\n   * @param {String} name Name of the example\n   * @param {Function} cb Callback that runs the example\n   */\n  function example(name, cb) {\n    pushExample(name, cb, false);\n  }\n\n  /**\n   * Create an example that will be the only one to run (unless there are\n   * multiple \"only\" ones to run). This is useful when you want to focus\n   * on a particular example.\n   *\n   * @param {String} name Name of the example\n   * @param {Function} cb Callback that runs the example\n   */\n  example.only = function(name, cb) {\n    pushExample(name, cb, true);\n  };\n\n  /**\n   * Create an example but do not run it (just a noop). This is useful when you\n   * want to temporarily disable an example.\n   */\n  example.skip = function() {};\n\n  return example;\n};\n"],"sourceRoot":"/source/"}